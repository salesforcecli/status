version: 2.1
orbs:
  win: circleci/windows@2
  slack: circleci/slack@3.4.2
  jq: circleci/jq@2

only-main: &only-main
  filters:
    branches:
      only:
        - main

matrix-params: &matrix-params
  cli: [sf, sfdx]
  channel: [stable, stable-rc]

installer-matrix: &installer-matrix
  matrix:
    parameters:
      <<: *matrix-params
      method: [installer]

npm-matrix: &npm-matrix
  matrix:
    parameters:
      <<: *matrix-params
      method: [npm]

tarball-matrix: &tarball-matrix
  matrix:
    parameters:
      <<: *matrix-params
      method: [tarball]

install-parameters: &parameters
  parameters:
    method:
      description: installation method
      type: enum
      enum: ['tarball', 'npm', 'installer']
    cli:
      description: cli to test
      type: enum
      enum: ['sf', 'sfdx']
    channel:
      description: channel to test
      type: enum
      enum: ['stable', 'stable-rc']
      default: 'stable'

jobs:
  test-macos-installation:
    <<: *parameters
    macos:
      xcode: 12.5.1
    steps:
      - jq/install
      - attach_workspace:
          at: /tmp/workspace
      - run: npm install -g @salesforce/plugin-release-management@latest
      - run:
          name: Test installation on macos
          command: |
            results=$(sf-release cli:install:test --cli << parameters.cli >> --method << parameters.method >> --channel << parameters.channel>> --json)
            echo $results | jq .
            status_num=$(echo $results | jq .status)
            [[ $status_num = 0 ]] && status="Passed" || status="Failed"
            echo -e "$status [<< parameters.cli >>/<< parameters.channel >>/<< parameters.method >>/macos | $CIRCLE_BUILD_URL]" >> /tmp/workspace/macos.<< parameters.cli >>.<< parameters.channel >>.<< parameters.method >>.results.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - macos.<< parameters.cli >>.<< parameters.channel>>.<< parameters.method >>.results.txt

  test-windows-installation:
    <<: *parameters
    executor:
      name: win/default
      size: xlarge
    steps:
      - attach_workspace:
          at: C:\tmp\workspace\
      - run: npm install -g @salesforce/plugin-release-management@latest
      - run:
          name: Test installation on windows
          command: |
            $result = sf-release cli:install:test --cli << parameters.cli >> --method << parameters.method >> --channel << parameters.channel>> --json | ConvertFrom-Json
            echo $result | ConvertTo-Json
            $status = if ($result.status -eq 0) { "Passed" } else { "Failed" }
            Add-Content -Path C:\tmp\workspace\windows.<< parameters.cli >>.<< parameters.channel >>.<< parameters.method >>.results.txt -Value "$status [<< parameters.cli >>/<< parameters.channel >>/<< parameters.method >>/windows | $env:CIRCLE_BUILD_URL]" -PassThru
      - persist_to_workspace:
          root: C:\tmp\workspace\
          paths:
            - ./windows.<< parameters.cli >>.<< parameters.channel>>.<< parameters.method >>.results.txt

  test-linux-installation:
    <<: *parameters
    docker:
      - image: node:lts
    steps:
      - jq/install
      - attach_workspace:
          at: /tmp/workspace
      - run: npm install -g @salesforce/plugin-release-management@latest
      - run:
          name: Test installation on linux
          command: |
            results=$(sf-release cli:install:test --cli << parameters.cli >> --method << parameters.method >> --channel << parameters.channel>> --json)
            echo $results | jq .
            status_num=$(echo $results | jq .status)
            [[ $status_num = 0 ]] && status="Passed" || status="Failed"
            echo -e "$status [<< parameters.cli >>/<< parameters.channel >>/<< parameters.method >>/linux | $CIRCLE_BUILD_URL]" >> /tmp/workspace/linux.<< parameters.cli >>.<< parameters.channel >>.<< parameters.method >>.results.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - linux.<< parameters.cli >>.<< parameters.channel>>.<< parameters.method >>.results.txt

  examine-results:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install l2met-shuttle
          command: |
            git clone https://github.com/heroku/heroku-buildpack-l2met-shuttle.git
            heroku-buildpack-l2met-shuttle/bin/compile .
      - run:
          name: Report test results
          command: |
            successes=$(sed -n -e '/^Passed/p' /tmp/workspace/*)
            echo "Successes:"
            echo "$successes"

            failures=$(sed -n -e '/^Failed/p' /tmp/workspace/*)
            echo "Failures:"
            echo "$failures"

            echo "Sending metrics:"
            # Passed [sfdx/stable-rc/installer/macos - https://circleci.com/gh/salesforcecli/status/925] -> count#platform-cli.sfdx.stable-rc.installer.macos.success=1
            # Failed [sfdx/stable-rc/installer/macos - https://circleci.com/gh/salesforcecli/status/925] -> count#platform-cli.sfdx.stable-rc.installer.macos.fail=1
            cat /tmp/workspace/* | while read line
            do
              base="platform-cli".$(echo $line | grep -oP '(?<=\[).*(?=\])' | cut -f1 -d"|" | tr '/' '.' | xargs)
              [[ "$line" == *"Passed"* ]] && status="success" || status="fail"
              heroku-buildpack-l2met-shuttle/support/start-l2met-shuttle echo "count#$base.$status=1"
            done

            if [[ ! -z "$failures" ]]; then
              exit 1
            fi;
      - slack/status:
          channel: 'cli-team-alerts'
          fail_only: true
          failure_message: 'CLI installation test failed. See examine-results job for more info.'

workflows:
  version: 2
  installers:
    triggers:
      - schedule:
          # Everyday at 10am Mountain Time
          cron: 0 16 * * *
          <<: *only-main
    jobs:
      - test-macos-installation:
          <<: *installer-matrix
      - test-windows-installation:
          <<: *installer-matrix
      - examine-results:
          requires:
            - test-macos-installation
            - test-windows-installation
  npm:
    triggers:
      - schedule:
          # Everyday at 10am Mountain Time
          cron: 0 16 * * *
          <<: *only-main
    jobs:
      - test-macos-installation:
          <<: *npm-matrix
      - test-windows-installation:
          <<: *npm-matrix
      - test-linux-installation:
          <<: *npm-matrix
      - examine-results:
          requires:
            - test-macos-installation
            - test-windows-installation
            - test-linux-installation

  tarballs:
    triggers:
      - schedule:
          # Everyday at 10am Mountain Time
          cron: 0 16 * * *
          <<: *only-main
    jobs:
      - test-macos-installation:
          <<: *tarball-matrix
      - test-windows-installation:
          <<: *tarball-matrix
      - test-linux-installation:
          <<: *tarball-matrix
      - examine-results:
          requires:
            - test-macos-installation
            - test-windows-installation
            - test-linux-installation
