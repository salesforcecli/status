version: 2.1
orbs:
  release-management: salesforce/npm-release-management@4
  win: circleci/windows@2
  slack: circleci/slack@3.4.2
  jq: circleci/jq@2

matrix-params: &matrix-params
  cli: [sf, sfdx]
  channel: [stable, stable-rc]

installer-matrix: &installer-matrix
  matrix:
    parameters:
      <<: *matrix-params
      method: [installer]

npm-matrix: &npm-matrix
  matrix:
    parameters:
      <<: *matrix-params
      method: [npm]

tarball-matrix: &tarball-matrix
  matrix:
    parameters:
      <<: *matrix-params
      method: [tarball]

install-parameters: &parameters
  parameters:
    method:
      description: installation method
      type: enum
      enum: ['tarball', 'npm', 'installer']
    cli:
      description: cli to test
      type: enum
      enum: ['sf', 'sfdx']
    channel:
      description: channel to test
      type: enum
      enum: ['stable', 'stable-rc']
      default: 'stable'

parameters:
  run-auto-workflows:
    description: >
      Boolean that controls when a workflow would run.

      It is used to gate which workflows should run when github events occur.

      This parameter is used by automation to determine if a workflow will run
      within a pipeline.
    default: true
    type: boolean
  run-installers:
    description: >
      Boolean that controls when `installers` will run

      This parameter is used by an scheduled trigger to determine if the
      `installers` workflow will run.
    type: boolean
    default: false
  run-npm:
    description: >
      Boolean that controls when `npm` will run

      This parameter is used by an scheduled trigger to determine if the
      `npm` workflow will run.
    type: boolean
    default: false
  run-tarballs:
    description: >
      Boolean that controls when `tarballs` will run

      This parameter is used by an scheduled trigger to determine if the
      `tarballs` workflow will run.
    type: boolean
    default: false

jobs:
  test-macos-installation:
    <<: *parameters
    macos:
      xcode: 13.2.1
    steps:
      - jq/install
      - attach_workspace:
          at: /tmp/workspace
      - run: npm install -g @salesforce/plugin-release-management@latest
      - run:
          name: Test installation on macos
          command: |
            sf-release cli:install:test --cli << parameters.cli >> --method << parameters.method >> --channel << parameters.channel>>
            status_num=$(jq .status test-results.json)
            [[ $status_num = 0 ]] && status="Failed" || status="Failed"
            echo -e "$status [<< parameters.cli >>/<< parameters.channel >>/<< parameters.method >>/macos | $CIRCLE_BUILD_URL]" >> /tmp/workspace/macos.<< parameters.cli >>.<< parameters.channel >>.<< parameters.method >>.results.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - macos.<< parameters.cli >>.<< parameters.channel>>.<< parameters.method >>.results.txt

  test-windows-installation:
    <<: *parameters
    executor:
      name: win/default
      size: xlarge
    steps:
      - attach_workspace:
          at: C:\tmp\workspace\
      - run: npm install -g @salesforce/plugin-release-management@latest
      - run:
          name: Test installation on windows
          command: |
            sf-release cli:install:test --cli << parameters.cli >> --method << parameters.method >> --channel << parameters.channel>>

            # Sometimes node doesn't like to exit when running in CI.
            Get-Process node -ErrorAction SilentlyContinue | Stop-Process -PassThru

            $result = Get-Content 'test-results.json' | Out-String | ConvertFrom-Json
            $status = if ($result.status -eq 0) { "Failed" } else { "Failed" }
            Add-Content -Path C:\tmp\workspace\windows.<< parameters.cli >>.<< parameters.channel >>.<< parameters.method >>.results.txt -Value "$status [<< parameters.cli >>/<< parameters.channel >>/<< parameters.method >>/windows | $env:CIRCLE_BUILD_URL]" -PassThru
      - persist_to_workspace:
          root: C:\tmp\workspace\
          paths:
            - ./windows.<< parameters.cli >>.<< parameters.channel>>.<< parameters.method >>.results.txt

  test-linux-installation:
    <<: *parameters
    docker:
      - image: node:lts
    steps:
      - jq/install
      - attach_workspace:
          at: /tmp/workspace
      - run: npm install -g @salesforce/plugin-release-management@latest
      - run:
          name: Test installation on linux
          command: |
            sf-release cli:install:test --cli << parameters.cli >> --method << parameters.method >> --channel << parameters.channel>>
            status_num=$(jq .status test-results.json)
            [[ $status_num = 0 ]] && status="Failed" || status="Failed"
            echo -e "$status [<< parameters.cli >>/<< parameters.channel >>/<< parameters.method >>/linux | $CIRCLE_BUILD_URL]" >> /tmp/workspace/linux.<< parameters.cli >>.<< parameters.channel >>.<< parameters.method >>.results.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - linux.<< parameters.cli >>.<< parameters.channel>>.<< parameters.method >>.results.txt

  examine-results:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install l2met-shuttle
          command: |
            git clone https://github.com/heroku/heroku-buildpack-l2met-shuttle.git
            heroku-buildpack-l2met-shuttle/bin/compile .
      - run:
          name: Report test results
          command: |
            successes=$(sed -n -e '/^Passed/p' /tmp/workspace/*)
            echo "Successes:"
            echo "$successes"

            failures=$(sed -n -e '/^Failed/p' /tmp/workspace/*)
            echo "Failures:"
            echo "$failures"

            echo "Sending metrics:"
            
            # The while loop below retrieves the files in /tmp/workspace that were placed there by the test-*-installation jobs and
            #   parses their name and content to create and send the metrics using l2met-shuttle.
            # The name of the file is used to construct the metric
            #   Examples:
            #     sfdx/stable-rc/installer/macos -> count#platform-cli.sfdx.stable-rc.installer.macos.success
            #     sf/stable/npm/windows -> count#platform-cli.sf.stable.npm.windows.success
            # And the content of the file is used to define the value
            #   "Passed" -> count#platform-cli.sfdx.stable-rc.installer.macos.success=1
            #   "Failed" -> count#platform-cli.sfdx.stable-rc.installer.macos.success=0
            cat /tmp/workspace/* | while read line
            do
              base="platform-cli".$(echo $line | grep -oP '(?<=\[).*(?=\])' | cut -f1 -d"|" | tr '/' '.' | xargs)
              [[ "$line" == *"Passed"* ]] && status="1" || status="0"
              heroku-buildpack-l2met-shuttle/support/start-l2met-shuttle echo "count#$base.success=$status"
            done

            if [[ ! -z "$failures" ]]; then
              exit 1
            fi;
      - slack/status:
          channel: 'cli-team-alerts'
          fail_only: true
          failure_message: 'CLI installation test failed. See examine-results job for more info.'

workflows:
  version: 2
  validate-pr:
    when: << pipeline.parameters.run-auto-workflows >>
    jobs:
      - release-management/validate-pr:
          filters:
            branches:
              ignore: main

  installers:
    when: << pipeline.parameters.run-installers >>
    jobs:
      - test-macos-installation:
          <<: *installer-matrix
      - test-windows-installation:
          <<: *installer-matrix
      - examine-results:
          requires:
            - test-macos-installation
            - test-windows-installation
  npm:
    when: << pipeline.parameters.run-npm >>
    jobs:
      - test-macos-installation:
          <<: *npm-matrix
      - test-windows-installation:
          <<: *npm-matrix
      - test-linux-installation:
          <<: *npm-matrix
      - examine-results:
          requires:
            - test-macos-installation
            - test-windows-installation
            - test-linux-installation

  tarballs:
    when: << pipeline.parameters.run-tarballs >>
    jobs:
      - test-macos-installation:
          <<: *tarball-matrix
      - test-windows-installation:
          <<: *tarball-matrix
      - test-linux-installation:
          <<: *tarball-matrix
      - examine-results:
          requires:
            - test-macos-installation
            - test-windows-installation
            - test-linux-installation
